/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Views;

import Controllers.ShipController;
import Models.Bullet;
import Models.Ship;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.geom.Rectangle2D;
import java.util.ArrayList;

/**
 *
 * @author Juan Camilo Mu√±oz, Luis Miguel Sanchez Pinilla
 */
public class ShipStatsPanelView extends javax.swing.JPanel {

    /**
     * Creates new form gameBar
     */
    private ShipController shipCon;
    
    //Status bar objects
    final int catSeparator = 600;
    final int xInitPostion = 18;
    final int yInitPosition = 10;
    final int itemSpaceSeparator = 20;
    
    //Graphical objects
    ArrayList<Ship> lives;
    ArrayList<Bullet> missiles;
    
    public ShipStatsPanelView(){
        initComponents();
        this.lives = new ArrayList<>();
        this.missiles = new ArrayList<>();
    }

    /**
     * Sets ShipController for the status bar.
     * @param ship ShipController
     */
    public void setShipController(ShipController ship) {
       this.shipCon = ship;
       repaint();
    }
    
    /**
     * Creates the shapes that represent the lives of the ship.
     */
    public void createLiveShapes(){
        if(this.lives != null && this.shipCon != null){
            this.lives.clear();
            int currentX = xInitPostion-8;
            //System.out.println("lives: "+this.shipCon.getLivesCount());
            for (int i = 0; i < this.shipCon.getLivesCount(); i++) {//cantidad de vidas en forma de tanque
                Ship ship = new Ship(currentX, yInitPosition);
                currentX += itemSpaceSeparator + ship.getShapes().get(0).getWidth();
                this.lives.add(ship);
            }
        }
        //System.out.println("lives list: "+this.lives.size());
    }
    
    /**
     * Creates the shapes that represent the missiles of the ship.
     */
    public void createMissileShapes(){
        if(this.missiles != null && this.shipCon != null){
            this.missiles.clear();
            int currentX = catSeparator+itemSpaceSeparator;
            for (int i = 0; i < this.shipCon.getMissileCapacity(); i++) {
                Bullet bullet = new Bullet(currentX, yInitPosition, 8 , 15);
                bullet.addShape(currentX-7, yInitPosition+16, 20, 3);
                currentX -= itemSpaceSeparator + bullet.getShapes().get(0).getWidth();
                this.missiles.add(bullet);
            }
        }
    }
    
    /**
     * This methods renders the Rectangle2D ArrayList shapes inside an specific Graphics2D renderer.
     * @param renderer where the shapes will be rendered.
     * @param shapes an ArrayList of Rectangle2D objects.
     * @param where a String of what object are we rendering.
     */
    public void fillRenderer(Graphics2D renderer, ArrayList<Rectangle2D> shapes){
        for(Rectangle2D current : shapes){
            renderer.fill(current);
        }
    }
    
    /**
     * Gets the Rectangle2D ArrayList of lives and sends it to the fillRenderer() method.
     * @param renderer a Graphics2D renderer.
     */
    public void renderPlayerLives(Graphics2D renderer){
        if(this.shipCon != null){
            createLiveShapes();
            renderer.setColor(this.shipCon.getShipColor());
            int n = 0;
            for(Ship current : this.lives){
                //System.out.println("lives: "+n+" | x: "+current.getX()+", y: "+current.getY());
                fillRenderer(renderer, current.getShapes());
                n++;
            }
        }
    }
    
    /**
     * Gets the Rectangle2D ArrayList of missiles and sends it to the fillRenderer() method.
     * @param renderer a Graphics2D renderer.
     */
    public void renderPlayerMissiles(Graphics2D renderer){
        createMissileShapes();
        renderer.setColor(Color.ORANGE);
        int n = 0;
        for(Bullet current : this.missiles){
            //System.out.println("missiles: "+n+" | x: "+current.getX()+", y: "+current.getY());
            fillRenderer(renderer, current.getShapes());
            n++;
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    @Override
    protected void paintComponent(Graphics g) {
        super.paintComponent(g); //To change body of generated methods, choose Tools | Templates.
        Graphics2D playerLives = (Graphics2D) g;
        Graphics2D playerMissiles = (Graphics2D) g;
        
        renderPlayerLives(playerLives);
        renderPlayerMissiles(playerMissiles);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
